% Script generated by Brainstorm (28-Aug-2018)
%% Amit Jaiswal 
restoredefaultpath
clc, clear, refresh, close
if ispc 
    homedir = 'C:\Users\fijaiami//'; 
    addpath([homedir 'Documents\GitHub\fieldtrip'])
    addpath(genpath([homedir '\Documents\brainstorm_180828\brainstorm3\']))
elseif isunix
    homedir= '/net/bonsai/home/amit/';
    addpath([homedir 'Documents/MATLAB/fieldtrip-master'])
    addpath(genpath([homedir 'brainstorm3']))
end 
ft_defaults
addpath([homedir 'Dropbox//MATLAB'])
Baseline = [-0.500 -0.050];
DataWindow = [0.050 0.500];
sampling_rate = 1000; % phantom data is collected at 1000 fs, can resample here

%%
% Build the path of the files to import
if ispc
    tutorial_dir = '\\172.16.50.206\data\rd\ChildBrain\BeamComp\Data_master\Aston_phantom_data';
%     tutorial_dir = 'F:\Astom_phanto_data';
    RawFile = fullfile(tutorial_dir, 'Amp20_IfASoff', 'dip05_200nAm_sss.fif');
    % AnatDir = fullfile(tutorial_dir, 'sample_neuromag', 'anatomy');
elseif isunix 
    tutorial_dir = '/net/bonsai/home/amit/Documents/BST_TutData';
    RawFile = fullfile(tutorial_dir, 'sample_phantom_elekta', 'dip05_200nAm_sss.fif');
%     RawFile = fullfile(tutorial_dir, 'sample_phantom_elekta', 'dip05_20nAm.fif');
    % AnatDir = fullfile(tutorial_dir, 'sample_neuromag', 'anatomy');
end
% Check if the folder contains the required files
% if ~file_exist(RawFile)
%     error(['The folder ' tutorial_dir ' does not contain the folder from the file sample_neuromag.zip.']);
% end

% ===== CREATE PROTOCOL =====
% The protocol name has to be a valid folder name (no spaces, no weird characters...)
ProtocolName = 'ELEKTA_PHANTOM';
% Start brainstorm without the GUI
if ~brainstorm('status')
    brainstorm nogui
end
% Delete existing protocol
gui_brainstorm('DeleteProtocol', ProtocolName);
% Create new protocol
gui_brainstorm('CreateProtocol', ProtocolName, 0, 0);
% Start a new report
bst_report('Start');
%% Phantom anatomy
SubjectName = 'Phantom121218';
DipoleFile = generate_phantom_elekta(SubjectName);

Act_locc=load(file_fullpath(DipoleFile));
for ii=1:32
    act_diploc(ii,:)=Act_locc.Dipole(1,ii).Loc';
end

% Process: Create link to raw file
sFiles = bst_process('CallProcess', 'process_import_data_raw', [], [], ...
    'subjectname',    SubjectName, ...
    'datafile',       {RawFile, 'FIF'}, ...
    'channelreplace', 1, ...
    'channelalign',   1, ...
    'evtmode',        'value');

%% Get subject definition
sSubject = bst_get('Subject', SubjectName);
% Get MRI file and surface files
MriFile    = sSubject.Anatomy(sSubject.iAnatomy).FileName;
CortexFile = sSubject.Surface(sSubject.iCortex).FileName;
HeadFile   = sSubject.Surface(sSubject.iScalp).FileName;
% Display MRI
hFigMri1 = view_mri(MriFile);
hFigMri3 = view_mri_3d(MriFile, [], [], 'NewFigure');
hFigMri2 = view_mri_slices(MriFile, 'x', 20); 
pause(0.5);
% Close figures
close([hFigMri1 hFigMri2 hFigMri3]);
% Display scalp and cortex
hFigSurf = view_surface(HeadFile);
hFigSurf = view_surface(CortexFile, [], [], hFigSurf);
hFigMriSurf = view_mri(MriFile, CortexFile);

% Figure configuration
iTess = 2;
panel_surface('SetShowSulci',     hFigSurf, iTess, 1);
panel_surface('SetSurfaceColor',  hFigSurf, iTess, [1 0 0]);
panel_surface('SetSurfaceSmooth', hFigSurf, iTess, 0.5, 0);
panel_surface('SetSurfaceTransparency', hFigSurf, iTess, 0.8);
figure_3d('SetStandardView', hFigSurf, 'left');
pause(0.5);
% Close figures
close([hFigSurf hFigMriSurf]);

fig1 = view_headpoints(sFiles.ChannelFile, HeadFile); % check the MEG/MRI alignment
% Process: Refine registration
sFiles = bst_process('CallProcess', 'process_headpoints_refine', sFiles, []);
fig2 = view_headpoints(sFiles.ChannelFile, HeadFile); % check the MEG/MRI alignment
pause(2.0)
close([fig1 fig2])

%% ===== READ EVENTS =====
% Process: Read from channel
sFiles = bst_process('CallProcess', 'process_evt_read', sFiles, [], ...
    'stimchan',  'SYS201', ...
    'trackmode', 1, ...  % Value: detect the changes of channel value
    'zero',      0);
% Process: Delete spurious other events unrelated to dipoles
sFiles = bst_process('CallProcess', 'process_evt_delete', sFiles, [], ...
    'eventname', '256, 768, 1792, 3840, 4096, 6144, 7168, 7680, 7936');
% Process: Rename events to have a leading zero, for proper sorting
sFiles = bst_process('CallProcess', 'process_evt_rename', sFiles, [], ...
    'src',  '5', ...
    'dest', '05');
% Delete the first event of the first category (there is always an artifact)
LinkFile = file_fullpath(sFiles.FileName);
LinkMat = load(LinkFile, 'F');
if ~isempty(LinkMat.F.events) && ~isempty(LinkMat.F.events(1).times)
    LinkMat.F.events(1).times(1)   = [];
    LinkMat.F.events(1).samples(1) = [];
    LinkMat.F.events(1).epochs(1)  = [];
end
bst_save(LinkFile, LinkMat, 'v6', 1);

eventlabel=LinkMat.F.events(1).label;
%%
sFilesEpochs = bst_process('CallProcess', 'process_import_data_event', sFiles, [], ...
    'subjectname', SubjectName, ...
    'condition',   '', ...
    'eventname',   eventlabel, ...
    'timewindow',  [], ...
    'epochtime',   [-0.1, 0.1], ...
    'createcond',  0, ...
    'ignoreshort', 1, ...
    'usectfcomp',  0, ...
    'usessp',      0, ...
    'freq',        500, ...
    'baseline',    [-0.1, 0]);

%%  Process: Average: By trial group (folder average)
sFilesAvg = bst_process('CallProcess', 'process_average', sFilesEpochs, [], ...
    'avgtype',    5, ...  % By trial group (folder average)
    'avg_func',   1, ...  % Arithmetic average:  mean(x)
    'weighted',   0, ...
    'keepevents', 0);

%% view averaged data
    % View recordings
    hFigMeg = view_timeseries(sFilesAvg.FileName, 'MEG');
    hFigMegGrad = view_timeseries(sFilesAvg.FileName, 'MEG GRAD');
    hFigMegMag = view_timeseries(sFilesAvg.FileName, 'MEG MAG');
    % hFigEeg = view_timeseries(sFilesRaw.FileName, 'Misc');
    hFigStim = view_timeseries(sFilesAvg.FileName, 'Stim');
    % hFigSel = view_timeseries(sFilesRaw.FileName, 'Stim', {'MLT11','MLT12','MLT13'});
    % Figure configuration
    pause(0.5);
    %panel_record('SetTimeLength', 2);
    %panel_record('SetStartTime', 100);
    panel_record('SetDisplayMode', hFigMeg, 'column');
    panel_montage('SetCurrentMontage', hFigMeg, 'MEG');
    % Set filters: panel_filter('SetFilters', LowPassEnabled, LowPassValue, HighPassEnabled, HighPassValue, SinRemovalEnabled, SinRemovalValue, MirrorEnabled, FullSourcesEnabled)
    panel_filter('SetFilters', 1, 45, 1, 1, 0, [], 0, 0);
    pause(0.5);
    panel_record('SetDisplayMode', hFigMeg, 'butterfly');
    panel_montage('SetCurrentMontage', hFigMeg, '');

    panel_record('SetDisplayMode', hFigMegGrad, 'butterfly');
    panel_record('SetDisplayMode', hFigMegMag, 'butterfly');

    % Close figures
    close([hFigMeg hFigMegGrad hFigMegMag hFigStim]);
%% Process: Compute Head Model
bst_process('CallProcess', 'process_headmodel', sFilesAvg, [], ...
    'Comment',     'phantom headmodel', ...
    'sourcespace', 2, ...  % MRI volume
    'meg',         2, ...  % single sphere
    'volumegrid',  struct(...
    'Method',        'isotropic', ...
    'nLayers',       17, ...
    'Reduction',     3, ...
    'nVerticesInit', 4000, ...
    'Resolution',    0.005, ...
    'FileName',      []));

%% Process: Compute covariance (noise or data)

bst_process('CallProcess', 'process_noisecov', sFilesEpochs, [], ...
    'baseline',       Baseline, ...
    'datatimewindow', DataWindow, ... 
    'sensortypes',    'MEG', ...
    'target',         1, ...  % Noise covariance     (covariance over baseline time window)
    'dcoffset',       1, ...  % Block by block, to avoid effects of slow shifts in data
    'identity',       0, ...
    'copycond',       0, ...
    'copysubj',       0, ...
    'replacefile',    1);  % Replace

bst_process('CallProcess', 'process_noisecov', sFilesEpochs, [], ...
    'baseline',       Baseline, ...
    'datatimewindow', DataWindow, ... 
    'sensortypes',    'MEG', ...
    'target',         2, ...  % Data covariance      (covariance over data time window)
    'dcoffset',       1, ...  % Block by block, to avoid effects of slow shifts in data
    'identity',       0, ...
    'copycond',       0, ...
    'copysubj',       0, ...
    'replacefile',    1);  % Replace

%% GLS
fprintf('\n GLS METHOD Calculating full noise prestim from all %.0f epochs.\n\n',length(sFilesEpochs))
sAvgGLS = bst_process('CallProcess', 'process_inverse_2018', sFilesAvg, [], ...
    'output',  1, ...  % Kernel only: shared
    'inverse', struct(...
    'Comment', '', ...
    'InverseMethod', 'gls', ...
    'InverseMeasure', 'performance', ...
    'SourceOrient', {{'free'}}, ...
    'Loose', 0.2, ...
    'UseDepth', 0, ...
    'WeightExp', 0.5, ...
    'WeightLimit', 10, ...
    'NoiseMethod', 'none', ...
    'NoiseReg', 0.1, ...
    'SnrMethod', 'rms', ...
    'SnrRms', 0, ...
    'SnrFixed', 3, ...
    'ComputeKernel', 1, ...
    'DataTypes', {{'MEG'}}));

result_gls=load(file_fullpath(sAvgGLS.FileName));
pow = result_gls.SourceDecompSa';
[val, ind] = max(pow(:));
[row_ind, col_ind] = ind2sub(size(pow),ind);
Est_loc_gls = result_gls.GridLoc(row_ind, :);
Est_val_gls = val;
figure
scatter3(result_gls.GridLoc(:,1), result_gls.GridLoc(:,2), result_gls.GridLoc(:,3))
hold on
scatter3(Est_loc_gls(:,1), Est_loc_gls(:,2), Est_loc_gls(:,3), 'MarkerFaceColor','r', 'Linewidth', 5)
axis off
rotate3d

difff_gls = sqrt(sum((act_diploc(5,[2,1,3])-Est_loc_gls).^2))*1000;

% ===== DIPOLE SCANNING =====
% Process: Dipole scanning
sDipScan = bst_process('CallProcess', 'process_dipole_scanning', sAvgGLS, [], ...
    'timewindow', [0.06, 0.06], ...
    'scouts',     {});

%
% Merge all 32 dipoles together
DipMergeFile = dipoles_merge({sDipScan.FileName});

% Flip orientations
dip = load(DipMergeFile);

for i = 1%:length(DipNdx),
    dip.Dipole(i).Amplitude = dip.Dipole(i).Amplitude * sign(dip.Dipole(i).Amplitude(3));
end
dip.Comment = [dip.Comment ' | flipped'];
DipFlipFile = db_add(sDipScan(1).iStudy, dip);

%
DipTrueFile = DipoleFile;
% Merge with true locations
DipAllFile = dipoles_merge({DipTrueFile, DipFlipFile});
% visualize on the MRI 3D
view_dipoles(DipAllFile, 'Mri3D');
view(3)

TrueDipoles = load(file_fullpath(DipTrueFile));
true_loc    = [TrueDipoles.Dipole.Loc];
true_orient = [TrueDipoles.Dipole.Amplitude];

temp_diff = dip.Dipole(i).Loc-true_loc(:,5);
difff = norm(temp_diff)*1000
difff_gls = sqrt(sum((dip.Dipole(i).Loc-true_loc(:,5)).^2))*1000

%% LCMV
fprintf('\n LCMV METHOD Calculating full noise prestim from all %.0f epochs.\n\n',length(sFilesEpochs))

sAvgLCMV = bst_process('CallProcess', 'process_inverse_2018', sFilesAvg, [], ...
    'output',  1, ...  % Kernel only: shared
    'inverse', struct(...
    'Comment', '', ...
    'InverseMethod', 'lcmv', ...
    'InverseMeasure', 'nai', ...
    'SourceOrient', {{'free'}}, ...
    'Loose', 0.2, ...
    'UseDepth', 0, ...
    'WeightExp', 0.5, ...
    'WeightLimit', 10, ...
    'NoiseMethod', 'none', ...
    'NoiseReg', 0.1, ...
    'SnrMethod', 'rms', ...
    'SnrRms', 0, ...
    'SnrFixed', 3, ...
    'ComputeKernel', 1, ...
    'DataTypes', {{'MEG'}}));

result_lcmv=load(file_fullpath(sAvgLCMV.FileName));
pow = result_lcmv.SourceDecompSa';
[val, ind] = max(pow(:));
[row_ind, col_ind] = ind2sub(size(pow),ind);
Est_loc_lcmv = result_lcmv.GridLoc(row_ind, :);
Est_val_lcmv = val;
figure
scatter3(result_gls.GridLoc(:,1), result_gls.GridLoc(:,2), result_gls.GridLoc(:,3))
hold on
scatter3(Est_loc_gls(:,1), Est_loc_gls(:,2), Est_loc_gls(:,3), 'MarkerFaceColor','r', 'Linewidth', 5)
axis off
rotate3d

difff_lcmv = sqrt(sum((act_diploc(5,[2,1,3])-Est_loc_lcmv).^2))*1000;

% ===== DIPOLE SCANNING =====
% Process: Dipole scanning
sDipScan = bst_process('CallProcess', 'process_dipole_scanning', sAvgLCMV, [], ...
    'timewindow', [0.06, 0.06], ...
    'scouts',     {});

%
% Merge all 32 dipoles together
DipMergeFile = dipoles_merge({sDipScan.FileName});

% Flip orientations
dip = load(DipMergeFile);

for i = 1%:length(DipNdx),
    dip.Dipole(i).Amplitude = dip.Dipole(i).Amplitude * sign(dip.Dipole(i).Amplitude(3));
end
dip.Comment = [dip.Comment ' | flipped'];
DipFlipFile = db_add(sDipScan(1).iStudy, dip);

%
DipTrueFile = DipoleFile;
% Merge with true locations
DipAllFile = dipoles_merge({DipTrueFile, DipFlipFile});
% visualize on the MRI 3D
view_dipoles(DipAllFile, 'Mri3D');
view(3)

TrueDipoles = load(file_fullpath(DipTrueFile));
true_loc    = [TrueDipoles.Dipole.Loc];
true_orient = [TrueDipoles.Dipole.Amplitude];

temp_diff = dip.Dipole(i).Loc-true_loc(:,5);
difff = norm(temp_diff)*1000
difff_lcmv = sqrt(sum((dip.Dipole(i).Loc-true_loc(:,5)).^2))*1000

%%





% Start a new report
bst_report('Start', sFiles);
